@model IEnumerable<VendingMachine.Models.Domain.Catalog>

@{
    ViewData["Title"] = "Газированные напитки";
}

<div class="container my-4">
    <h2>Газированные напитки</h2>

    <div class="d-flex justify-content-between align-items-center my-3">
        <div class="d-flex gap-3 align-items-center">
            <div>
                <label for="brandSelect">Выберите бренд</label>
                <select id="brandSelect" class="form-select">
                    <option value="">Все</option>
                    @foreach (var brand in Model.Select(m => m.Brand.Name).Distinct())
                    {
                        <option value="@brand">@brand</option>
                    }
                </select>
            </div>
            <div>
                <label for="priceRange" class="form-label">Стоимость</label>
                <input type="range" class="form-range" min="0" max="110" id="priceRange">
                <span>0 руб. - 110 руб.</span>
            </div>
        </div>
        <div class="d-flex gap-2">
            <a class="btn btn-secondary" href="/Admin/Import">Импорт</a>

            <a id="selectedCountBtn" class="btn btn-success disabled" href="#">Выбрано: 0</a>
        </div>
    </div>

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
        @foreach (var item in Model.Select((drink, index) => new { drink, index }))
        {
            var drinkId = item.drink.Id;
            var imageName =
            item.drink.Name.ToLower().Contains("cola") ? "cola.png" :
            item.drink.Name.ToLower().Contains("fanta") ? "fanta.png" :
            item.drink.Name.ToLower().Contains("sprite") ? "sprite.png" :
            item.drink.Name.ToLower().Contains("pepper") ? "drpepper.png" :
            item.drink.Name.ToLower().Contains("chernogolovka") ? "chernogolovka.png" :
            item.drink.Name.ToLower().Contains("irn") ? "irnbru.png" :
            item.drink.Name.ToLower().Contains("mountain") ? "mountaindew.png" :
            item.drink.Name.ToLower().Contains("pepsi") ? "pepsi.png" : "placeholder.png";

            <div class="col drink-item"
                 data-brand="@item.drink.Brand.Name"
                 data-price="@item.drink.Price">
                <div class="card h-100 text-center">
                    <img src="@Url.Content("~/images/" + imageName)" class="card-img-top p-3" alt="@item.drink.Name">
                    <div class="card-body">
                        <p class="card-text">@item.drink.Name</p>
                        <p class="fw-bold">@item.drink.Price руб.</p>
                        @if (item.drink.Quantity > 0)
                        {
                            <button class="btn btn-warning select-btn"
                                    data-id="@item.drink.Id"
                                    data-selected="false">

                                Выбрать
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" disabled>Закончился</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        const selectedItems = new Set();
        const drinkItems = document.querySelectorAll('.drink-item');
        const brandSelect = document.getElementById('brandSelect');
        const priceRange = document.getElementById('priceRange');
        const priceLabel = priceRange.nextElementSibling;
        const counterBtn = document.getElementById('selectedCountBtn');

        function updateVisibleDrinks() {
            const selectedBrand = brandSelect.value;
            const maxPrice = parseFloat(priceRange.value);

            drinkItems.forEach(item => {
                const brand = item.getAttribute('data-brand');
                const price = parseFloat(item.getAttribute('data-price'));

                const matchBrand = selectedBrand === "" || brand === selectedBrand;
                const matchPrice = price <= maxPrice;

                item.style.display = (matchBrand && matchPrice) ? "block" : "none";
            });

            priceLabel.textContent = `0 руб. - ${maxPrice} руб.`;
        }

                function getSelectedDrinksData() {
            const selected = [];
            document.querySelectorAll('.select-btn[data-selected="true"]').forEach(btn => {
                const id = parseInt(btn.getAttribute('data-id'));
                const card = btn.closest('.card');
                const name = card.querySelector('.card-text').textContent;
                const priceText = card.querySelector('.fw-bold').textContent;
                const price = parseFloat(priceText.replace(/[^\d.]/g, ''));
                const imageUrl = card.querySelector('img').getAttribute('src');

                selected.push({ id, name, price, imageUrl, isAvailable: true, isSelected: true });
            });
            return selected;
        }


                document.getElementById('selectedCountBtn').addEventListener('click', async function (e) {
            e.preventDefault();
            const selectedDrinks = Array.from(selectedItems);

            if (selectedDrinks.length > 0) {
                const response = await fetch('/Order/CreateOrder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(selectedDrinks)
                });

                if (response.ok) {
                    window.location.href = '/Order/Checkout';
                } else {
                    alert('Ошибка при создании заказа');
                }
            }
        });


        function updatePriceRangeLimits() {
            const selectedBrand = brandSelect.value;
            let prices = [];

            drinkItems.forEach(item => {
                const brand = item.getAttribute('data-brand');
                const price = parseFloat(item.getAttribute('data-price'));

                if (selectedBrand === "" || brand === selectedBrand) {
                    prices.push(price);
                }
            });

            if (prices.length > 0) {
                const min = Math.min(...prices);
                const max = Math.max(...prices);
                priceRange.min = min;
                priceRange.max = max;
                priceRange.value = max;
                priceLabel.textContent = `0 руб. - ${max} руб.`;
            }
        }

        brandSelect.addEventListener('change', () => {
            updatePriceRangeLimits();
            updateVisibleDrinks();
        });

        priceRange.addEventListener('input', updateVisibleDrinks);

        // выбор товара
        document.querySelectorAll('.select-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const id = btn.getAttribute('data-id');
                const selected = btn.getAttribute('data-selected') === 'true';

                if (selected) {
                    selectedItems.delete(id);
                    btn.classList.remove('btn-success');
                    btn.classList.add('btn-warning');
                    btn.textContent = 'Выбрать';
                    btn.setAttribute('data-selected', 'false');
                } else {
                    selectedItems.add(id);
                    btn.classList.remove('btn-warning');
                    btn.classList.add('btn-success');
                    btn.textContent = 'Выбрано';
                    btn.setAttribute('data-selected', 'true');
                }

                const count = selectedItems.size;
                counterBtn.textContent = `Выбрано: ${count}`;
                counterBtn.classList.toggle('disabled', count === 0);
            });
        });

        // начальная инициализация
        updatePriceRangeLimits();
        updateVisibleDrinks();
    </script>
}
